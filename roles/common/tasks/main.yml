---
- include_vars: ../vars/vault.yml

- name: Restore default gateway while updating
  shell: 'route add default gw $(route -n | awk ''/eth0/{if ($2 != "0.0.0.0") {print $2}}'' | head -1) eth0'
  ignore_errors: yes

- name: Touch program directory
  file: path={{ prog_dir }} state=directory mode=0755

# This will compile owamp, but it's easier to just transfer an
# already compiled version

# - name: Check if owping is installed
#   stat: path=/usr/local/bin/owping
#   register: owping

# - include: owamp.yml
#   when: not owping.stat.exists

- name: Transfer owping
  copy: src=owping dest=/usr/bin/owping mode=0755

# Not really necessary, because the probe's init script also does this
# - name: Update apt repositories
#   apt: update_cache=yes

- name: Install necessary packages
  apt: name={{ item }} state=present
  with_items: "{{ packages }}"

- name: Enable fake-hwclock
  shell: systemctl enable fake-hwclock

- name: Start fake-hwclock
  shell: systemctl start fake-hwclock

- name: Enable ntp
  shell: systemctl enable ntp

- name: Start ntp
  shell: systemctl start ntp

- name: Install elastic search module
  pip: name=elasticsearch executable=pip3

- name: Touch script directory
  file: path={{ script_dir }} state=directory mode=0755

# I originally used the synchronize module here
# (rsync frontend), but for some reason it stopped
# working
- name: Transfer scripts
  copy: src=wifi_scripts/ dest={{ script_dir }}/

# Combines the default, group and host script configs into one single script config
- name: Transfer json-formatted script config
  copy: content="{{ host_script_configs | to_json }}" dest={{ script_dir }}/script_configs.json

# The old influxdb method uses a template with the credentials, but using
# json is much easier, so we do that here instead for Elastic
- name: Transfer json formatted db configs
  copy: content={{ databases | to_json }} dest={{ script_dir }}/db_configs.json

# Ignore 2G and 5G exclusive  for now, as other things need to
# be fixed too before they can be used
# NB: At the moment the configs for 2G and 5G will
# just use any's certificate, so remember to
# change that in the conf files!!!
- name: Read wpa cert filenames
  local_action: "command ls {{ cert_dir }}/host_certs/{{ inventory_hostname }}/any/"
  register: any_cert_filename

- name: Transfer wpa_supplicant certificates
  copy: src="{{ cert_dir }}/host_certs/{{ inventory_hostname }}/" dest="/etc/wpa_supplicant/"

- name: Transfer templated config files
  template: src={{ item }} dest={{ script_dir }}/
  with_fileglob: ../templates/*

- name: Use default influxdb config if specified
  template: src="../templates/influxdb.credentials.default" dest="{{ script_dir}}/influxdb.credentials"
  when: "{{ databases.influxdb.status == 'uninett' }}"

- name: Transfer systemd unit files
  template: src=../templates/{{ item }} dest=/etc/systemd/system/
  with_items:
    - make_ramdisk.service
    - wifi_probing.service

- name: Reload systemd unit files
  command: "systemctl daemon-reload"

- name: Transfer control program
  copy: src={{ item }} dest={{ script_dir }}/
  with_items:
    - control_program.py
    - control_program_wrapper.sh

- name: Copy connection status script
  copy: src=connection_status.sh dest=/root/

- name: Enable IPv6 for wlan0 by changing sysctl.conf
  blockinfile:
    dest: /etc/sysctl.conf
    block: |
      net.ipv6.conf.wlan0.accept_ra=1
      net.ipv6.conf.wlan0.accept_ra_defrtr=1
      net.ipv6.conf.wlan0.accept_ra_pinfo=1

- name: Make the scripts executable
  shell: "chmod +x {{ script_dir | quote }}/*.sh {{ script_dir | quote }}/*.py {{ script_dir | quote }}/*.pl /root/connection_status.sh"

- name: Blacklist the internal wifi driver
  copy: src=wlan_blacklist.conf dest=/etc/modprobe.d/
  register: wlanblacklist


- name: Generate probe id from wlan MAC
  command: "{{ script_dir }}/generate_probe_id.sh"
  args:
    chdir: "{{ script_dir }}"

- name: Add cron entry to reboot at midnight
  cron:
    name: "reboot at midnight"
    minute: "0"
    hour: "0"
    job: "/sbin/shutdown -r now"

- name: Find wireless adapter
  shell: lsusb | grep -i '2357:010C\|056E:4008\|2001:3311\|0DF6:0076\|2001:3310\|2001:330F\|07B8:8179\|0BDA:0179\|0BDA:8179\|0411:025D\|2019:AB32\|7392:A813\|056E:4007\|0411:0242\|0846:9052\|056E:400F\|056E:400E\|0E66:0023\|2001:3318\|2001:3314\|04BB:0953\|7392:A812\|7392:A811\|0BDA:0823\|0BDA:0820\|0BDA:A811\|0BDA:8822\|0BDA:0821\|0BDA:0811\|2357:0122\|148F:9097\|20F4:805B\|050D:1109\|2357:010D\|2357:0103\|2357:0101\|13B1:003F\|2001:3316\|2001:3315\|07B8:8812\|2019:AB30\|1740:0100\|1058:0632\|2001:3313\|0586:3426\|0E66:0022\|0B05:17D2\|0409:0408\|0789:016E\|04BB:0952\|0DF6:0074\|7392:A822\|2001:330E\|050D:1106\|0BDA:881C\|0BDA:881B\|0BDA:881A\|0BDA:8812\|2357:0109\|2357:0108\|2357:0107\|2001:3319\|0BDA:818C\|0BDA:818B\|148F:7650\|0B05:17D3\|0E8D:760A\|0E8D:760B\|13D3:3431\|13D3:3434\|148F:6370\|148F:7601\|148F:760A\|148F:760B\|148F:760C\|148F:760D\|2001:3D04\|2717:4106\|2955:0001\|2955:1001\|2955:1003\|2A5F:1000\|7392:7710\|0E8D:7650\|0E8D:7630\|2357:0105\|0DF6:0079\|0BDB:1011\|7392:C711\|20F4:806B\|293C:5702\|057C:8502\|04BB:0951\|07B8:7610\|0586:3425\|2001:3D02\|2019:AB31\|0DF6:0075\|0B05:17DB\|0B05:17D1\|148F:760A\|148F:761A\|7392:B711\|7392:A711\|0E8D:7610\|13B1:003E\|148F:7610\|0E8D:7662\|0E8D:7632\|0B05:17C9\|0E8D:7612\|045E:02E6\|0B05:17EB\|0846:9053\|0B05:180B\|0846:9014'
  register: adapter

- name: Collect adapter id's
  shell: echo "{{ adapter.stdout }}" | awk '{ print$6 }'
  register: id

- name: Register vendor id
  shell: echo "{{ id.stdout }}" | cut -d ':' -f 1
  register: ID_VENDOR_ID

- name: Register model id
  shell: echo "{{ id.stdout }}" | cut -d ':' -f 2
  register: ID_MODEL_ID

- name: Add script for shutting down probe upon unplugging the wifi adapter
  shell: echo 'ACTION=="remove", ENV{ID_VENDOR_ID}=="{{ ID_VENDOR_ID.stdout }}", ENV{ID_MODEL_ID}=="{{ ID_MODEL_ID.stdout }}", RUN+="/sbin/shutdown -h now"' > /etc/udev/rules.d/00-dongle_shutdown.rules
  when: "{{ adapter }}"

- name: Change default password
  user: name=root password={{ root_pass }}

- name: Enable control program
  service: name=wifi_probing enabled=yes state=restarted

- name: Update driver for wireless adapter
  shell: install-wifi
  when: ansible_distribution != "Kali"

- name: Set update flag to 0
  lineinfile: dest={{ script_dir }}/update regexp="^.*" line=0

- name: Remove the created default gateway
  command: "route del default gw 0.0.0.0 eth0"
  ignore_errors: yes

- name: Reboot if internal wlan nic was blacklisted
  command: "/sbin/shutdown -r +1"
  when: wlanblacklist.changed
