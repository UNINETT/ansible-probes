---
- include_vars: ../vars/vault.yml

# Set a flag to inform the control program that an update is in process
# (only relevant if this playbook has been run before)
- name: Set update flag to 1
  lineinfile: dest={{ script_dir }}/update regexp="^.*" line=1 create=yes

# Restart the control program. This is to make sure all currently
# running tests are stopped, and the probe is reconnected to the
# internet before doing further updates
- name: Restart control program (if running)
  service: name=wifi_probing state=restarted
  ignore_errors: yes

- name: Touch program directory
  file: path={{ prog_dir }} state=directory mode=0755

# This will compile owamp, but it's easier to just transfer an
# already compiled version

# - name: Check if owping is installed
#   stat: path=/usr/local/bin/owping
#   register: owping

# - include: owamp.yml
#   when: not owping.stat.exists

- name: Transfer owping
  copy: src=owping dest=/usr/bin/owping mode=0755

# Not really necessary, because the probe's init script also does this
# - name: Update apt repositories
#   apt: update_cache=yes

- name: Install necessary packages
  apt: name={{ item }} state=present
  with_items: "{{ packages }}"

- name: Install elastic search module
  pip: name=elasticsearch executable=pip3

- name: Touch script directory
  file: path={{ script_dir }} state=directory mode=0755

# I originally used the synchronize module here
# (rsync frontend), but for some reason it stopped
# working
- name: Transfer scripts
  copy: src=wifi_scripts/ dest={{ script_dir }}/

# Combines the default, group and host script configs into one single script config
- name: Transfer json-formatted script config
  copy: content="{{ (default_script_configs | union(group_script_configs | union(host_script_configs))) | to_json }}" dest={{ script_dir }}/script_configs.json

# The old influxdb method uses a template with the credentials, but using
# json is much easier, so we do that here instead for Elastic
- name: Transfer json formatted db configs
  copy: content={{ databases | to_json }} dest={{ script_dir }}/db_configs.json

# Ignore 2G and 5G exclusive  for now, as other things need to
# be fixed too before they can be used
# NB: At the moment the configs for 2G and 5G will
# just use any's certificate, so remember to
# change that in the conf files!!!
- name: Read wpa cert filenames
  local_action: "command ls {{ cert_dir }}/host_certs/{{ inventory_hostname }}/any/"
  register: any_cert_filename

- name: Transfer wpa_supplicant certificates
  copy: src="{{ cert_dir }}/host_certs/{{ inventory_hostname }}/" dest="/etc/wpa_supplicant/"

- name: Transfer templated config files
  template: src={{ item }} dest={{ script_dir }}/
  with_fileglob: ../templates/*
  
- name: Use default influxdb config if specified
  template: src="../templates/influxdb.credentials.default" dest="{{ script_dir}}/influxdb.credentials"
  when: "{{ databases.influxdb.status == 'uninett' }}"

- name: Transfer systemd unit files
  template: src=../templates/{{ item }} dest=/etc/systemd/system/
  with_items:
    - make_ramdisk.service
    - wifi_probing.service
 
- name: Reload systemd unit files
  command: "systemctl daemon-reload"

- name: Transfer control program
  copy: src={{ item }} dest={{ script_dir }}/
  with_items:
    - control_program.py
    - control_program_wrapper.sh

- name: Copy connection status script
  copy: src=connection_status.sh dest=/root/

- name: Make the scripts executable
  shell: "chmod +x {{ script_dir | quote }}/*.sh {{ script_dir | quote }}/*.py {{ script_dir | quote }}/*.pl /root/connection_status.sh"

- name: Blacklist the internal wifi driver
  copy: src=wlan_blacklist.conf dest=/etc/modprobe.d/

- name: Generate probe id from wlan MAC
  command: "{{ script_dir }}/generate_probe_id.sh"
  args:
    chdir: "{{ script_dir }}"

- name: Change default password
  user: name=root password={{ root_pass }}

- name: Enable control program
  service: name=wifi_probing enabled=yes state=restarted

- name: Set update flag to 0
  lineinfile: dest={{ script_dir }}/update regexp="^.*" line=0
